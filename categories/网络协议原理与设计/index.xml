<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>网络协议原理与设计 on 阿左笔记</title>
        <link>http://localhost:1313/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86%E4%B8%8E%E8%AE%BE%E8%AE%A1/</link>
        <description>Recent content in 网络协议原理与设计 on 阿左笔记</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>阿左阿右</copyright>
        <lastBuildDate>Wed, 23 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86%E4%B8%8E%E8%AE%BE%E8%AE%A1/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>应用层协议设计的总结</title>
        <link>http://localhost:1313/p/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%80%BB%E7%BB%93/</link>
        <pubDate>Wed, 23 Oct 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%80%BB%E7%BB%93/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%e6%b5%81%e5%bc%8f%e5%8d%8f%e8%ae%ae&#34; &gt;1. &lt;strong&gt;流式协议&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%e6%b5%81%e7%9a%84%e8%be%b9%e7%95%8c&#34; &gt;2. &lt;strong&gt;流的边界&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%e5%ba%94%e7%94%a8%e5%b1%82%e5%8d%8f%e8%ae%ae%e8%ae%be%e8%ae%a1&#34; &gt;3. &lt;strong&gt;应用层协议设计&lt;/strong&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#31-%e6%8a%a5%e6%96%87%e8%ae%be%e8%ae%a1&#34; &gt;3.1. &lt;strong&gt;报文设计&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#32-%e8%a7%a3%e6%9e%90%e5%99%a8%e8%ae%be%e8%ae%a1&#34; &gt;3.2. &lt;strong&gt;解析器设计&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-流式协议&#34;&gt;1. &lt;strong&gt;流式协议&lt;/strong&gt;
&lt;/h1&gt;&lt;p&gt;  TCP提供一种可靠传输方式，通过序列号和包重传确认机制保证数据包的有序，不会丢包或包乱序，并且数据一定被正确发到目的地。如果我们使用UDP协议，但又不能接受丢包，那就要在UDP的基础去现类似TCP的有序和可靠传输机制了（例如 RTP、RUDP）。TCP作为&lt;code&gt;流式协议&lt;/code&gt;，它保证数据有序送达，但是数据流中，那个字节是开始，那个字节是结束，这就不关人家的事情了，也就是说，我们从传输层拿到数据后，要自行处理数据的&lt;code&gt;边界&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&#34;2-流的边界&#34;&gt;2. &lt;strong&gt;流的边界&lt;/strong&gt;
&lt;/h1&gt;&lt;p&gt;关于边界问题，有两种情况：&lt;code&gt;粘包&lt;/code&gt;、&lt;code&gt;半包&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;粘包： 多个包裹连接在一起，也可能不是整数个包。&lt;/li&gt;
&lt;li&gt;半包： 只收到一个包的一部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  无论是半包还是粘包问题，问题都出在&lt;code&gt;流的边界&lt;/code&gt;上，常用的解决办法有3种：&lt;code&gt;固定包长度&lt;/code&gt;、&lt;code&gt;指定包结束标志&lt;/code&gt;、&lt;code&gt;封装一套协议（协议头+数据）&lt;/code&gt;。对于数据包固定大小，当数据长度小于包长度时，需要使用特定字符填充，例如“\0”，必须和正常数据区分开。当数据报长度大于包长度时，需要分包，发送端需要分包，接收端需要组包。对于指定包的结束标志，就是使用特定的符号或者符号组合作为包结束标志，例如FTP、SMTP协议，使用“\r\n”表示结束，接受端处理包时，遇到“\r\n”就认为获取到了一个包。&lt;/p&gt;
&lt;h1 id=&#34;3-应用层协议设计&#34;&gt;3. &lt;strong&gt;应用层协议设计&lt;/strong&gt;
&lt;/h1&gt;&lt;p&gt;  应用层协议设计要和网络传输层解耦，协议层提供读写报文的回调函数的声明，但是函数实现交给由业务层完成，业务层需要将设计好的读写函数注册给协议层。协议层需要读写数据时直接调用读写函数即可。但是要注意，协议的读写回调需要使用非阻塞方式实现。一般情况下，网络部分也是独立的模块，业务层通过网络模块接收网络数据并将数据保存到缓存区中，然后将缓存区的使用权移交给协议层，同样协议层需要发送数据时，也要将报文的缓存区使用权移交给网络模块。&lt;/p&gt;
&lt;h2 id=&#34;31-报文设计&#34;&gt;3.1. &lt;strong&gt;报文设计&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;报文一般会分为&lt;code&gt;控制报文&lt;/code&gt;和&lt;code&gt;数据报文&lt;/code&gt;。控制报文用于处理设备连接/断开、配置管理、流控制等，数据报文用于传输各种数据，报文大概的结构如下：&lt;br&gt;
&lt;img src=&#34;http://localhost:1313/p/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%80%BB%E7%BB%93/%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;最基本的控制报文有：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;控制报文&lt;/th&gt;
          &lt;th&gt;功能&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Hello报文&lt;/td&gt;
          &lt;td&gt;双方建立连接（TCP）后发送的第一个包是Hello报文，&lt;br&gt; 用于同步双方的信息，包括协议版本，软件版本等等，保证新版协议对于旧版本的兼容性&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;connect报文&lt;/td&gt;
          &lt;td&gt;客户端发送，建立用户协议的连接&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;disconnect报文&lt;/td&gt;
          &lt;td&gt;断开连接，双发都可以发送&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;其他&lt;/td&gt;
          &lt;td&gt;&amp;hellip;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;32-解析器设计&#34;&gt;3.2. &lt;strong&gt;解析器设计&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;通常我们使用基于回调的状态机架构来设计解析器。协议解析器定义了一个完整的回调接口系统来处理协议的数据包解析和序列化。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;解析器的核心组成&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;数据收发器&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;一对儿回调函数，由用户提供，用于从网络接收数据，以及发送数据到网络&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;数据处理器&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;一套数据处理回调程序，由于用户提供。&lt;br&gt; 解析器收到完整报文并解析后将数据分发给对应的处理程序&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;报文构造器&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;由用户调用，用于构造报文并将数据添加到报文中，最后将报文添加到发送队列中&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;capabilities缓存&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;记录通讯双方的功能特性，用于兼容旧版协议&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;头部缓存&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;保存正在接收的头部（报文头部、类型头部），以及接收进度。&lt;br&gt; 头部决定了数据接收完成后，分发给那个处理程序&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;接收缓冲区&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;缓存接收到的数据，以及接收进度。&lt;br&gt; 数据接收完成后，解析器会将数据地址传递给对应的处理函数&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;发送队列&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;缓存等待发送的报文&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;锁&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;保存用户传入的互斥量，维护发送队列的线程安全&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;协议层的任务循环&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;协议层任务循环以读回调为入口，一旦读取到数据，解析器就进入解析流程，依次读取报文头部、类型头部、数据，直到读回调返回0。在读取报文头部后会检查头部字段是否合法，并获取报文长度，以便于确定当前报文的结束边界。&lt;/li&gt;
&lt;li&gt;如果读回调返回0时，读取到的数据小于报文长度，此时会从解析流程返回，但是数据不会丢失，因为解析器已经缓存数据，等到新数据达到可以继续读取，直到读取到整个报文。读取一个完整报文后就将数据移交给处理器程序。&lt;/li&gt;
&lt;li&gt;处理器需要在处理数据后发送响应报文，也就是将处理结果打包成对应的报文并添加到发送队列中。而解析器发送回调的任务就是将发送队列中报文缓存区移交给网络模块。也可以基于事件机制，网络模块收到数据后通知协议层读取数据，而协议层这边在发送队列有数据时通知网络模块。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Linux异步IO（01） — EPOLL</title>
        <link>http://localhost:1313/p/linux%E5%BC%82%E6%AD%A5io01-epoll/</link>
        <pubDate>Mon, 12 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/linux%E5%BC%82%E6%AD%A5io01-epoll/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-epoll%e5%8e%9f%e7%90%86%e4%bb%8b%e7%bb%8d&#34; &gt;1. EPOLL原理介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-epoll%e4%bd%bf%e7%94%a8&#34; &gt;2. EPOLL使用&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#21-%e5%88%9b%e5%bb%baepoll%e5%af%b9%e8%b1%a1&#34; &gt;2.1. 创建EPOLL对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#22-%e6%93%8d%e4%bd%9c%e5%86%85%e6%a0%b8%e4%ba%8b%e4%bb%b6%e8%a1%a8&#34; &gt;2.2. 操作内核事件表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#23-%e7%ad%89%e5%be%85%e4%ba%8b%e4%bb%b6&#34; &gt;2.3. 等待事件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-et%e5%92%8clt%e6%a8%a1%e5%bc%8f%e5%af%b9%e6%af%94&#34; &gt;3. ET和LT模式对比&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#31-%e9%97%ae%e9%a2%98&#34; &gt;3.1. 问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-epolloneshot%e4%ba%8b%e4%bb%b6&#34; &gt;4. EPOLLONESHOT事件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5-%e5%85%b6%e4%bb%96%e5%b0%8f%e4%bb%a3%e7%a0%81&#34; &gt;5. 其他小代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-epoll原理介绍&#34;&gt;1. EPOLL原理介绍
&lt;/h1&gt;&lt;p&gt;  EPOLL是Linux内核提供的的I/O复用函数，简单地说就说使用一个文件描述符来监控多个文件描述符上的事件，当文件描述符上的事件发生时，会通知用户。如果没有这种多路复用机制，那么，面对多个Socket同时通信的场景可能就需要多线程了，但是每个SOcket上并不是一直都有数据，使用多线程多浪费资源呀。&lt;/p&gt;
&lt;p&gt;  Epoll把用户关心的“文件描述符”放在内核里面一个&lt;code&gt;事件表&lt;/code&gt;中，此时就需要一个单独“文件描述符”来标识内核中的这个事件表。另外EPOLL有两种工作模式：&lt;code&gt;水平触发&lt;/code&gt;(Level Triggered，LT)和&lt;code&gt;边缘触发&lt;/code&gt;(Edge Triggered，ET)，LT模式是EPOLL默认的工作模式，EPOLL和异步，非阻塞结合使用。&lt;/p&gt;
&lt;p&gt;  简单讲一下原理，Epoll的核心是两个数据结构： 红黑树 和 就绪链表（双向链表）。然后结合内核回调机制，实现了高性能的事件管理。红黑树存储所有通过epoll_ctl()添加的文件句柄，树中的每个节点会关联一个结构体（保存了这个文件描述符的上需要监控的事件）。就绪的事件会被保存到储在就绪链表中，当就绪链表不为空时，内核会通知用户，用户可以通过epoll_wait()函数获取就绪事件。&lt;/p&gt;
&lt;h1 id=&#34;2-epoll使用&#34;&gt;2. EPOLL使用
&lt;/h1&gt;&lt;h2 id=&#34;21-创建epoll对象&#34;&gt;2.1. 创建EPOLL对象
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;sys/epoll.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;epoll_create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// size参数没有意义。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;返回一个文件描述符，代表内核事件表。&lt;/p&gt;
&lt;h2 id=&#34;22-操作内核事件表&#34;&gt;2.2. 操作内核事件表
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;sys/epoll.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;epoll_ctl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoll_event&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//成功返回0，失败返回-1，并设置errno。  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;epfd：内核事件表文件描述符。&lt;br&gt;
op：操作类型。&lt;br&gt;
fd：要操作的文件描述符。&lt;br&gt;
event：指向 epoll_event 结构体的指针，用于指定要添加、修改或删除的事件。&lt;/p&gt;
&lt;p&gt;其中，op(操作类型)有三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EPOLL_CTL_ADD：往内核事件表中添加事件。&lt;/li&gt;
&lt;li&gt;EPOLL_CTL_MOD：修改事件。&lt;/li&gt;
&lt;li&gt;EPOLL_CTL_DEL：删除事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，event(关心的事件)的类型是&lt;code&gt;struct epoll_event&lt;/code&gt;，结构体定义如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoll_event&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;__uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;events&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 事件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;epoll_data_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 事件携带的用户数据
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;events&lt;/strong&gt; 是一个位图，有EPOLLIN、EPOLLOUT、EPOLLET、EPOLLONESHOT。&lt;br&gt;
&lt;strong&gt;data&lt;/strong&gt; 是&lt;code&gt;epoll_data_t&lt;/code&gt;类型，它是一个联合体，定义如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;union&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoll_data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;uint64_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;epoll_data_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;由于这是一个联合体，所以这四个成员，我们只能使用其中的一个。&lt;/p&gt;
&lt;h2 id=&#34;23-等待事件&#34;&gt;2.3. 等待事件
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;sys/epoll.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;epoll_wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epoll_event&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;events&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maxevents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;epoll_wait在一段超时时间内，等待一组文件描述符上的事件，返回就绪的文件描述符的数量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;timeout: 参数指定等待的时间，单位是毫秒。如果timeout为-1，则表示无限等待。&lt;/li&gt;
&lt;li&gt;maxevents: 参数指定最多等待的事件数，必须大于0。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;epoll_wait检测到事件，就会将所有的就绪事件从内核事件表拷贝到events数组中，并返回就绪事件的数量，也就是说event中的事件都是就绪的。&lt;/p&gt;
&lt;h1 id=&#34;3-et和lt模式对比&#34;&gt;3. ET和LT模式对比
&lt;/h1&gt;&lt;p&gt;对于Socket读事件，只要Socket上的数据没有读完，就会一直触发EPOLL事件，而对于ET模式，Socket上每来一次数据就会触发一次&lt;code&gt;EPOLLIN&lt;/code&gt;事件，如果上一次触发后，未将 socket 上的数据读完，也不会再触发，除非再新来一次数据。对于 socket 写事件，如果 socket 的 TCP 窗口一直不饱和，会一直触发 EPOLLOUT 事件；而对于边缘模式，只会触发一次，除非 TCP 窗口由不饱和变成饱和再一次变成不饱和，才会再次触发 &lt;code&gt;EPOLLOUT&lt;/code&gt;事件。根据以上分析来看，如果采用ET模式就必须在收到事件后一次性将数据读取完，但如果采用默认模式，就可以根据业务每次收取固定的字节数，多次收取，显然相对于默认的LT模式，ET模式能够减少同一个事件被触发的次数，效率比LT模式高。&lt;/p&gt;
&lt;h2 id=&#34;31-问题&#34;&gt;3.1. 问题
&lt;/h2&gt;&lt;p&gt;多线程场景下，我们使用ET模式监听一个Socket上的读事件，当数据到达时触发EPOLLIN事件，我们在一个独立线程(或进程)中读取该Socket上的数据，但是我们还没有读取完，该Socket又有新数据到达，此时另一个线程(或进程)被唤醒来读取该Socket上的数据，那么就有两个线程(进程)同时操作同一个Socket，这样好吗，这样不好，但是如何解决呢？此时就该EPOLLONESHOT出场了。&lt;/p&gt;
&lt;h1 id=&#34;4-epolloneshot事件&#34;&gt;4. EPOLLONESHOT事件
&lt;/h1&gt;&lt;p&gt;显然，&lt;code&gt;一次性事件&lt;/code&gt;，就是触发以后，需要手动重新注册，给文件描述符注册EPOLLONESHOT事件，就可以保证同一时间只有一个人在使用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 重新注册EPOLLONESHOT事件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;reset_oneshot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epollfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;epoll_event&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;events&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EPOLLIN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EPOLLET&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EPOLLONESHOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;epoll_ctl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epollfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EPOLL_CTL_MOD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;注意：&lt;/code&gt;
listening socket是不能使用EPOLLONESHOT的，否则后续的客户段连接请求就不会再触发listening socket的EPOLLIN事件了。&lt;/p&gt;
&lt;h1 id=&#34;5-其他小代码&#34;&gt;5. 其他小代码
&lt;/h1&gt;&lt;p&gt;&lt;code&gt;1. 将文件描述符设置为非阻塞&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setnonblocking&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old_option&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fcntl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;F_GETFL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_option&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old_option&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;O_NONBLOCK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;fcntl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;F_SETFL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_option&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old_option&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;2. 事件注册&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;addfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;epollfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;enable_et&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;epoll_event&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;events&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EPOLLIN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enable_et&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;events&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EPOLLET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//启用ET模式
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;epoll_ctl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;epollfd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EPOLL_CTL_ADD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;setnonblocking&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;3. 判断数据是否读取完了&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 非阻塞模式
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;errno&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EAGAIN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;errno&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EWOULDBLOCK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 数据读取完了
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>TCP是如何保证可靠性的</title>
        <link>http://localhost:1313/p/tcp%E6%98%AF%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%8F%AF%E9%9D%A0%E6%80%A7%E7%9A%84/</link>
        <pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/tcp%E6%98%AF%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%8F%AF%E9%9D%A0%E6%80%A7%E7%9A%84/</guid>
        <description>&lt;p&gt;TCP可靠性可以总结为 6 个方面：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 数据分片与序列号&lt;/strong&gt;&lt;br&gt;
TCP将应用层的数据流分割成适合网络传输的报文段（Segment），每个报文段包含一个序列号（Sequence Number），标识该段数据在整体数据流中的位置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;乱序重组&lt;/strong&gt;： 即使数据包通过不同路径到达，接收方也能根据序列号重新排序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;去重&lt;/strong&gt;： 通过序列号识别并丢弃重复的数据包。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重排&lt;/strong&gt;： 接收方按序号重组数据后，按顺序交给应用层。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;示例：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;发送方发送数据 &amp;#34;Hello&amp;#34;，初始序列号为100，每个字符占1字节：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;报文1：Seq=100, Data=&amp;#34;H&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;报文2：Seq=101, Data=&amp;#34;e&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;接收方返回确认号（ACK=105），表示期望下一个字节是105。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;2. 确认应答（ACK）机制&lt;/strong&gt;&lt;br&gt;
接收方每收到一个报文段，会返回一个确认报文（ACK），其中包含期望接收的下一个字节的序列号。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保发送方知道哪些数据已被正确接收。&lt;/li&gt;
&lt;li&gt;发送方仅需重传未被确认的数据段。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;示例：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;若接收方收到 Seq=100 的数据，会返回 ACK=101，表示“已收到100，期待101”。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;3. 超时重传&lt;/strong&gt;
见《报文重传》。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 滑动窗口&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;流量控制
接收方通过TCP头部的**窗口字段（Window Size）**告知发送方当前可接收的数据量（接收窗口 rwnd）。 &lt;br&gt;
发送方根据 rwnd 动态调整发送速率，避免接收方缓冲区溢出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拥塞控制
根据一定的算法控制发送速率。 &lt;br&gt;
发送方根据网络状态动态调整发送窗口（拥塞窗口 cwnd），避免网络过载。&lt;br&gt;
实际发送窗口大小为 min(rwnd, cwnd)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;5. 校验和&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据完整性校验&lt;/strong&gt;：TCP头部和数据部分均包含校验和，接收方通过校验和验证数据是否在传输中损坏。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;丢弃损坏数据&lt;/strong&gt;：若校验失败，接收方丢弃该报文段，并等待发送方重传。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;6. 连接管理&lt;/strong&gt;
也就是三次握手与四次挥手。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>TCP拥塞控制</title>
        <link>http://localhost:1313/p/tcp%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/</link>
        <pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/tcp%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-tcp%e6%8b%a5%e5%a1%9e%e6%8e%a7%e5%88%b6&#34; &gt;1. TCP拥塞控制&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#11-%e5%8f%91%e7%94%9f%e6%8b%a5%e5%a1%9e%e5%89%8d%e7%9a%84%e6%8b%a5%e5%a1%9e%e6%8e%a7%e5%88%b6&#34; &gt;1.1. 发生拥塞前的拥塞控制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#12-%e5%8f%91%e7%94%9f%e6%8b%a5%e5%a1%9e%e5%90%8e%e7%9a%84%e6%8b%a5%e5%a1%9e%e6%8e%a7%e5%88%b6&#34; &gt;1.2. 发生拥塞后的拥塞控制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%e5%85%b6%e4%bb%96&#34; &gt;2. 其他&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-tcp拥塞控制&#34;&gt;1. TCP拥塞控制
&lt;/h1&gt;&lt;p&gt;  动态调整数据传输速率，在网络好的时候提高发送速度，在网络不好的时候减少发送速度，这样在最大化利用带宽的同时并保证数据传输的可靠性，这就是拥塞控制的业务了，在拥塞控制的标准文档中（RFC 5681）中描述了拥塞控制的4个部分，或者说4种状态，拥塞控制就是4种状态之间的切换。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;慢启动&lt;/li&gt;
&lt;li&gt;拥塞避免&lt;/li&gt;
&lt;li&gt;快速重传&lt;/li&gt;
&lt;li&gt;快速恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  但是要注意了，标准没有规定4种状态都要实现，取决于具体的算法设计思路，Linux内核中提供了多种实现，我当前的系统是Ubuntu24.4，使用的是：cubic算法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;zci@GEM:~$ cat /proc/sys/net/ipv4/tcp_congestion_control 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cubic
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;  这个拥塞控制，到底控制了个啥呀，这时候要先提3个概念：&lt;code&gt;RWDN&lt;/code&gt;（接收通告窗口）、&lt;code&gt;CWDN&lt;/code&gt;（拥塞窗口）、&lt;code&gt;SWDN&lt;/code&gt;（Send Window，发送窗口）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RWND&lt;/strong&gt;：接收方通过这个东西告诉发送方，它的TCP接收缓存区还能容纳多少字节的数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CWND&lt;/strong&gt;：拥塞窗口，拥塞控制直接控制这个变量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SWND&lt;/strong&gt;：RWND、CWND两者的最小值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  拥塞控制这一套最终的目的就是控制SWDN的大小。从另一个角度理解SWND，TCP采用发送应答机制，每一个发送出去的数据报文，都要接收对方的应答报文，以此来确保对方确实收到了数据。如果说每次发送数据后，非要等到收到对方的应答报文后才能发送下一个报文，那网络就卡到爆炸了。所以TCP协议允许一次性发送多个报文，这个一次性发送的数据量就是&lt;code&gt;发送窗口&lt;/code&gt;。现在我们知道了RWND来自于接收方，那么CWND如何获取呢？  &lt;br&gt;
  在一些书籍上，将SWND计算分为两种情况： 1.&lt;code&gt;发生拥塞前的拥塞控制&lt;/code&gt; 2.&lt;code&gt;发生拥塞后的拥塞控制&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;11-发生拥塞前的拥塞控制&#34;&gt;1.1. 发生拥塞前的拥塞控制
&lt;/h2&gt;&lt;p&gt;  预防性拥塞避免，这种情况下的拥塞控制有两个阶段：&lt;code&gt;慢启动&lt;/code&gt;、&lt;code&gt;拥塞避免&lt;/code&gt;。在TCP连接建立后，CWND会有一个初始值，内核版本不同这个初始值可能也会不同。&lt;code&gt;慢启动&lt;/code&gt;处于刚开始发送数据的时候，实际上它也不慢，以指数形式增加CWDN，每收到一个ACK就增加一次。但是会受到&lt;code&gt;慢启动门限&lt;/code&gt;的限制，当CWND大于慢启动门限时就会进入拥塞避免状态，而&lt;code&gt;拥塞避免&lt;/code&gt;采用线性的方法增加CWND。&lt;/p&gt;
&lt;h2 id=&#34;12-发生拥塞后的拥塞控制&#34;&gt;1.2. 发生拥塞后的拥塞控制
&lt;/h2&gt;&lt;p&gt;  首先我们要判断拥塞是否发生了，有两种判断依据：&lt;code&gt;传输超时&lt;/code&gt;、&lt;code&gt;接收到重复的确认报文段&lt;/code&gt;。两种情况使用的拥塞控制方法也不同。&lt;br&gt;
&lt;strong&gt;1.&lt;/strong&gt;  &lt;code&gt;传输超时，或者收到重复报文段发生在超时后面&lt;/code&gt;：这种情况使用的还是“慢启动-&amp;gt;拥塞避免”的套路。如果判断是这种情况，就会将CWDN设置为一个小于慢启动门限制的值，如此一来，拥塞控制就会进入慢启动状态了。&lt;br&gt;
&lt;strong&gt;2.&lt;/strong&gt;  &lt;code&gt;接收到重复ACK报文&lt;/code&gt;： 使用&lt;code&gt;快速重传&lt;/code&gt;-&amp;gt;&lt;code&gt;快速恢复&lt;/code&gt;的套路。检测到这种事件，会立即重传丢失的报文，也就是&lt;code&gt;快速重传&lt;/code&gt;，重传后会将CWND设置为一个大于慢启动门限的值，之后每次收到一个重复的ACK，SWND就增加一个SMSS，直到收到新数据的ACK时，将CWND设置为慢启动门限，这就是&lt;code&gt;快速恢复&lt;/code&gt;，之后就会进入拥塞避免状态了。&lt;/p&gt;
&lt;h1 id=&#34;2-其他&#34;&gt;2. 其他
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;SMSS&lt;/strong&gt;： TCP报文段数据部分的最大长度。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>TCP报文重传</title>
        <link>http://localhost:1313/p/tcp%E6%8A%A5%E6%96%87%E9%87%8D%E4%BC%A0/</link>
        <pubDate>Sun, 18 Jun 2023 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/tcp%E6%8A%A5%E6%96%87%E9%87%8D%E4%BC%A0/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%e4%bb%80%e4%b9%88%e6%97%b6%e5%80%99%e9%87%8d%e4%bc%a0%e6%8a%a5%e6%96%87&#34; &gt;1. 什么时候重传报文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%e8%b6%85%e6%97%b6%e9%87%8d%e4%bc%a0%e7%ad%96%e7%95%a5&#34; &gt;2. 超时重传策略&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%e5%bf%ab%e9%80%9f%e9%87%8d%e4%bc%a0%e7%ad%96%e7%95%a5&#34; &gt;3. 快速重传策略&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#31-sack&#34; &gt;3.1. SACK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-%e5%85%b6%e4%bb%96&#34; &gt;4. 其他&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-什么时候重传报文&#34;&gt;1. 什么时候重传报文
&lt;/h1&gt;&lt;p&gt;  重传报文有两种情况：&lt;code&gt;超时重传&lt;/code&gt;、&lt;code&gt;快速重传&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;超时重传&lt;/strong&gt;:  发送端的TCP模块每发送一个报文后都会启用定时器，如果在定时时间内没有收到应答报文，就会重传该报文，这就是超时重传，至于没有收到应答报文，可能是报文丢失，也可能是应答报文丢失。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速重传&lt;/strong&gt;：  发送端连续收到3个重复报文段，就认为丢包了，触发快速重传，重传丢失的报文段。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-超时重传策略&#34;&gt;2. 超时重传策略
&lt;/h1&gt;&lt;p&gt;  TCP模块会为每一个发送出去但没有收到ACK的报文维护一个定时器，报文发送出去就会启用超时定时器，超时时间（RTO）的设置当然是依据RTT的，但不是简单的RTO=RTT，毕竟RTT也是动态变化的，具体的计算方法我也没有细究。当前只需要知道，当到达超时时间但没有收到ACK，就会重传报文并重置定时器，以Linux为例，有两个重要的内核参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root@GEM:/proc/sys/net/ipv4# &lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/proc/sys/net/ipv4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root@GEM:/proc/sys/net/ipv4# 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root@GEM:/proc/sys/net/ipv4# ls tcp_retries
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tcp_retries1  tcp_retries2                       &lt;span class=&#34;c1&#34;&gt;# 两个文件决定了重传的次数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root@GEM:/proc/sys/net/ipv4# 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;tcp_retries1&lt;/strong&gt;  最少重传次数，默认为3，在IP层接管之前的最少重传次数。&lt;br&gt;
&lt;strong&gt;tcp_retries2&lt;/strong&gt;  最多重传次数，默认为15，连接放弃前的最多重传次数。&lt;/p&gt;
&lt;p&gt;  至于多次重传时RTO的设置，Linux采用的是&lt;code&gt;加倍&lt;/code&gt;的方式，即每次重传都将RTO增大一倍，当然在算法层面，这个“加倍”不是“x2”，只是最终的结果表现为倍增。不管底层算法是如何设计的，这个超时重传的时间跨度还是比较长的，这肯定不行啊，所以就有了&lt;code&gt;快速重传&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&#34;3-快速重传策略&#34;&gt;3. 快速重传策略
&lt;/h1&gt;&lt;p&gt;  从发送端角度看，连续收到3个重复的ACK，就认为这个报文丢了，例如一个报文的编号为10～101，发送端连续收到3个101-ACK，就认为“seq 10:101”这个报文丢失了，此时就会触发快速重传，这玩意儿也是拥塞控制的一部分。&lt;br&gt;
&lt;img src=&#34;http://localhost:1313/p/tcp%E6%8A%A5%E6%96%87%E9%87%8D%E4%BC%A0/%E5%BF%AB%E9%80%9F%E9%87%8D%E4%BC%A0.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;缺点&lt;/code&gt;:&lt;br&gt;
  当发生丢包事件时就说明网络可能是拥塞了，这种情况下可能就不是丢一个包这么简单了，如果丢了好几个包呢，那此时的重传工作就复杂了，那几个包需要重传呢？这时就需要&lt;code&gt;SACK&lt;/code&gt;（Selective Acknowledgment）机制了，在TCP协议头的头部选项中开启此功能。&lt;/p&gt;
&lt;h2 id=&#34;31-sack&#34;&gt;3.1. SACK
&lt;/h2&gt;&lt;p&gt;  在【TCP协议与报文结构】篇章中我们提到了SACK，也就是kind=5的头部选项，接收端通过该选项来携带丢失的数据信息，告诉发送端哪些数据丢失了，这样发送端只需要重传丢失的数据即可。但是这个“丢失信息”的格式是什么样的呢，这时候就要注意了，TCP是流式协议，我们不能应该从报文的角度来看，它是&lt;code&gt;数据流&lt;/code&gt;，“丢包”就是数据流中的一段或者多段缺失了，此时我只需要标识出那几段缺失了，也就是缺失数据段的起始位置和结束位置，SACK类型的头部选项格式如下：  &lt;br&gt;
&lt;img src=&#34;http://localhost:1313/p/tcp%E6%8A%A5%E6%96%87%E9%87%8D%E4%BC%A0/SACK.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt; &lt;br&gt;
从图中可以看出，SACK选项的info部分，包含了一段或者多段记录，每段记录包含8个字节，这8个字节又分为两部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;缺失段左边缘&lt;/strong&gt;： 左边4个字节记录了起始序号，就是缺失数据段的第一个字节的序号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺失段右边缘&lt;/strong&gt;： 右边4个字节记录了结束序号，就是缺失数据段的最后一个字节的序号的下一个序号。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-其他&#34;&gt;4. 其他
&lt;/h1&gt;&lt;p&gt;  &lt;code&gt;RTT&lt;/code&gt;，它表示包的&lt;code&gt;往返时间&lt;/code&gt;，就是&lt;code&gt;数据发送时刻&lt;/code&gt;到&lt;code&gt;接收到ACK时刻&lt;/code&gt;的差值。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>TCP的“三次握手”与“四次挥手”</title>
        <link>http://localhost:1313/p/tcp%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</link>
        <pubDate>Sat, 17 Jun 2023 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/tcp%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-tcpdump-%e6%8a%93%e5%8f%96tcp%e6%8a%a5%e6%96%87&#34; &gt;1. tcpdump 抓取Tcp报文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%e5%88%86%e6%9e%90%e6%8a%93%e5%8c%85%e7%bb%93%e6%9e%9c&#34; &gt;2. 分析抓包结果&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#21-%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b&#34; &gt;2.1. 三次握手&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#22-%e6%95%b0%e6%8d%ae%e5%8f%91%e9%80%81%e4%b8%8e%e5%93%8d%e5%ba%94&#34; &gt;2.2. 数据发送与响应&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#23-%e5%9b%9b%e6%ac%a1%e6%8c%a5%e6%89%8b&#34; &gt;2.3. 四次挥手&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-%e5%85%b6%e4%bb%96&#34; &gt;3. 其他&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-tcpdump-抓取tcp报文&#34;&gt;1. tcpdump 抓取Tcp报文
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;code&gt;现在有一对tcp程序&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务端地址：192.168.52.39：8080。&lt;/li&gt;
&lt;li&gt;客户端地址：192.168.52.67。&lt;/li&gt;
&lt;li&gt;连接建立后客户端发送数据： ABCDEF。&lt;/li&gt;
&lt;li&gt;服务器收到数据后，发送数据：ABCDEFGH。&lt;/li&gt;
&lt;li&gt;客户端断开连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; &lt;code&gt;tcpdump抓取Tcp报文&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo tcpdump -i any &lt;span class=&#34;s1&#34;&gt;&amp;#39;tcp and host 192.168.52.39 and host 192.168.52.67&amp;#39;&lt;/span&gt; -vvn
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; &lt;code&gt;抓取结果&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tcpdump: data link &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt; LINUX_SLL2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tcpdump: listening on any, link-type LINUX_SLL2 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Linux cooked v2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, snapshot length &lt;span class=&#34;m&#34;&gt;262144&lt;/span&gt; bytes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;13:29:25.569020 wlp4s0 In  IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 57345, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 60&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.67.33762 &amp;gt; 192.168.52.39.8080: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;S&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0x3356 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;correct&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 3666571938, win 64240, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val &lt;span class=&#34;m&#34;&gt;1128528921&lt;/span&gt; ecr 0,nop,wscale 7&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;13:29:25.569049 wlp4s0 Out IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 0, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 60&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.39.8080 &amp;gt; 192.168.52.67.33762: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;S.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xe9e9 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x92ef&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 394631164, ack 3666571939, win 65160, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val &lt;span class=&#34;m&#34;&gt;4121163671&lt;/span&gt; ecr 1128528921,nop,wscale 7&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;13:29:25.571512 wlp4s0 In  IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 57346, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 52&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.67.33762 &amp;gt; 192.168.52.39.8080: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xbe4a &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;correct&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 1, ack 1, win 502, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span class=&#34;m&#34;&gt;1128528925&lt;/span&gt; ecr 4121163671&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;13:29:25.571513 wlp4s0 In  IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 57347, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 58&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.67.33762 &amp;gt; 192.168.52.39.8080: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;P.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xfa78 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;correct&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 1:7, ack 1, win 502, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span class=&#34;m&#34;&gt;1128528925&lt;/span&gt; ecr 4121163671&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length 6: HTTP
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;13:29:25.571554 wlp4s0 Out IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 45420, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 52&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.39.8080 &amp;gt; 192.168.52.67.33762: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xe9e1 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0xbe39&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 1, ack 7, win 510, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span class=&#34;m&#34;&gt;4121163674&lt;/span&gt; ecr 1128528925&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;13:29:25.571658 wlp4s0 Out IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 45421, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 60&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.39.8080 &amp;gt; 192.168.52.67.33762: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;P.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xe9e9 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0xb520&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 1:9, ack 7, win 510, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span class=&#34;m&#34;&gt;4121163674&lt;/span&gt; ecr 1128528925&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length 8: HTTP
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;13:29:25.577532 wlp4s0 In  IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 57348, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 52&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.67.33762 &amp;gt; 192.168.52.39.8080: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xbe35 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;correct&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 7, ack 9, win 502, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span class=&#34;m&#34;&gt;1128528929&lt;/span&gt; ecr 4121163674&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;13:29:30.578167 wlp4s0 In  IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 57349, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 52&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.67.33762 &amp;gt; 192.168.52.39.8080: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;F.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xaaab &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;correct&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 7, ack 9, win 502, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span class=&#34;m&#34;&gt;1128533930&lt;/span&gt; ecr 4121163674&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;13:29:30.618353 wlp4s0 Out IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 45422, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 52&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.39.8080 &amp;gt; 192.168.52.67.33762: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xe9e1 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x96ec&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 9, ack 8, win 510, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span class=&#34;m&#34;&gt;4121168721&lt;/span&gt; ecr 1128533930&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;13:29:35.571866 wlp4s0 Out IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 45423, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 52&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.39.8080 &amp;gt; 192.168.52.67.33762: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;F.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xe9e1 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x8392&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 9, ack 8, win 510, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span class=&#34;m&#34;&gt;4121173674&lt;/span&gt; ecr 1128533930&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;13:29:35.576375 wlp4s0 In  IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 0, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 52&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.67.33762 &amp;gt; 192.168.52.39.8080: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0x7014 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;correct&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 8, ack 10, win 502, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span class=&#34;m&#34;&gt;1128538928&lt;/span&gt; ecr 4121173674&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;^C
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; packets captured
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; packets received by filter
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; packets dropped by kernel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;2-分析抓包结果&#34;&gt;2. 分析抓包结果
&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; packets captured
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; packets received by filter
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; packets dropped by kernel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;三次握手、四次挥手、一个数据报文，一个数据报文的ACK，算起来9个报文，下面分析一下抓取的报文。&lt;/p&gt;
&lt;h2 id=&#34;21-三次握手&#34;&gt;2.1. 三次握手
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.67.33762 &amp;gt; 192.168.52.39.8080: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;S&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0x3356 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;correct&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 3666571938, win 64240, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val &lt;span class=&#34;m&#34;&gt;1128528921&lt;/span&gt; ecr 0,nop,wscale 7&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.39.8080 &amp;gt; 192.168.52.67.33762: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;S.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xe9e9 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x92ef&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 394631164, ack 3666571939, win 65160, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val &lt;span class=&#34;m&#34;&gt;4121163671&lt;/span&gt; ecr 1128528921,nop,wscale 7&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.67.33762 &amp;gt; 192.168.52.39.8080: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xbe4a &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;correct&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 1, ack 1, win 502, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span class=&#34;m&#34;&gt;1128528925&lt;/span&gt; ecr 4121163671&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;简单分析一下：&lt;br&gt;
&lt;code&gt;192.168.52.67.33762 &amp;gt; 192.168.52.39.8080&lt;/code&gt;： 报文的源地址 &amp;gt; 目标地址 &lt;br&gt;
&lt;code&gt;Flags [S]&lt;/code&gt;:   同步报文段，由客户端发送，表示请求建立一个连接。&lt;br&gt;
&lt;code&gt;Flags [S.]&lt;/code&gt;:  同步+确认报文段，由服务端发送，做了两件事： 1.同步,表示同意客户端的连接请求。2.响应客户端的SYN报文。 &lt;br&gt;
&lt;code&gt;Flags [.]&lt;/code&gt;:   确认报文。&lt;br&gt;
&lt;code&gt;seq 3666571938&lt;/code&gt;:   客户端ISN值，就是报文序号的初始值。&lt;br&gt;
&lt;code&gt;seq 394631164&lt;/code&gt;:    服务端ISN值，两个传输方向分别有各自的ISN值。 &lt;br&gt;
&lt;code&gt;ack 3666571939&lt;/code&gt;:   确认序号，表示服务端已经收到客户端的报文,确认序号就是接收到的报文的seq+1。 &lt;br&gt;
&lt;code&gt;options [mss 1460,sackOK,TS val 1128528921 ecr 0,nop,wscale 7]&lt;/code&gt;:   TCP头部结构中的头部选项。&lt;br&gt;
&lt;code&gt;length 0&lt;/code&gt;:  报文的数据长度，SYN 包不携带数据，所以为0。&lt;/p&gt;
&lt;p&gt;以上就是“三次握手”。&lt;/p&gt;
&lt;h2 id=&#34;22-数据发送与响应&#34;&gt;2.2. 数据发送与响应
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 客户端发送数据包，6个字节&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.67.33762 &amp;gt; 192.168.52.39.8080: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;P.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xfa78 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;correct&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 1:7, ack 1, win 502, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span class=&#34;m&#34;&gt;1128528925&lt;/span&gt; ecr 4121163671&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length 6: HTTP
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 服务器收到数据包，发送确认消息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.39.8080 &amp;gt; 192.168.52.67.33762: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xe9e1 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0xbe39&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 1, ack 7, win 510, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span class=&#34;m&#34;&gt;4121163674&lt;/span&gt; ecr 1128528925&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 服务器发送数据包，8个字节&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.39.8080 &amp;gt; 192.168.52.67.33762: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;P.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xe9e9 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0xb520&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 1:9, ack 7, win 510, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span class=&#34;m&#34;&gt;4121163674&lt;/span&gt; ecr 1128528925&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length 8: HTTP
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 客户端接收数据包，发送确认消息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.67.33762 &amp;gt; 192.168.52.39.8080: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xbe35 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;correct&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 7, ack 9, win 502, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span class=&#34;m&#34;&gt;1128528929&lt;/span&gt; ecr 4121163674&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;seq 1:7&lt;/code&gt;:         数据报文的起始序列号为1（方向： 客户端-&amp;gt;服务器），报文所携带的字节编号是[1, 7)。  &lt;br&gt;
&lt;code&gt;length 6: HTTP&lt;/code&gt;:  报文携带的数据长度为6字节，识别为HTTP报文是因为使用了8080端口。 &lt;br&gt;
&lt;code&gt;seq 1:9&lt;/code&gt;:         数据报文的起始序列号为1（方向： 服务器-&amp;gt;客户端）。 &lt;br&gt;
&lt;code&gt;ack 7&lt;/code&gt;:           确认序号为7，就是对于来自客户端的数据报文进行响应，表示收到了这个报文，ack=seq+length+1，也就是下一个报文的起始序列号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;br&gt;
tcp虽然也是一个一个报文发送的，但是tcp是流式协议，序列号用于表示一次网络通信过程中，所传输数据的每一个&lt;code&gt;字节&lt;/code&gt;的编号，注意了是字节的编号，在一次通信活动中，数据字节的编号是连续的。因为是流式协议，对于应用层协议来说，tcp数据流是没有边界的，会发生所谓的&lt;code&gt;粘包&lt;/code&gt;问题，这需要应用层去解决，毕竟tcp只负责数据的可靠传输，而不管数据从哪里开始，从到哪里结束。&lt;br&gt;
&lt;strong&gt;ACK报文：&lt;/strong&gt;&lt;br&gt;
例如一个报文，字节编号是[100, 201)，这个报文的应答报文的ACK就是201，也就是下一个报文的数据字节的起始编号，通过这个方式告诉发送端，这个报文已经收到，可以开始发送下一个报文了。&lt;/p&gt;
&lt;h2 id=&#34;23-四次挥手&#34;&gt;2.3. 四次挥手
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.67.33762 &amp;gt; 192.168.52.39.8080: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;F.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xaaab &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;correct&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 7, ack 9, win 502, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span class=&#34;m&#34;&gt;1128533930&lt;/span&gt; ecr 4121163674&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.39.8080 &amp;gt; 192.168.52.67.33762: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xe9e1 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x96ec&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 9, ack 8, win 510, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span class=&#34;m&#34;&gt;4121168721&lt;/span&gt; ecr 1128533930&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.39.8080 &amp;gt; 192.168.52.67.33762: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;F.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xe9e1 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x8392&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 9, ack 8, win 510, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span class=&#34;m&#34;&gt;4121173674&lt;/span&gt; ecr 1128533930&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    192.168.52.67.33762 &amp;gt; 192.168.52.39.8080: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0x7014 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;correct&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 8, ack 10, win 502, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;nop,nop,TS val &lt;span class=&#34;m&#34;&gt;1128538928&lt;/span&gt; ecr 4121173674&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;192.168.52.67.33762 &amp;gt; 192.168.52.39.8080: Flags [F.]&lt;/code&gt;:   客户端发送了关闭连接的请求。&lt;br&gt;
&lt;code&gt;192.168.52.39.8080 &amp;gt; 192.168.52.67.33762: Flags [.]&lt;/code&gt;:    服务器收到客户端请求后，发送了确认包。  &lt;br&gt;
&lt;code&gt;192.168.52.39.8080 &amp;gt; 192.168.52.67.33762: Flags [F.]&lt;/code&gt;:   服务器发送了关闭连接的请求。 &lt;br&gt;
&lt;code&gt;192.168.52.67.33762 &amp;gt; 192.168.52.39.8080: Flags [.]&lt;/code&gt;:    客户端收到服务器的关闭请求后，发送了确认包。&lt;/p&gt;
&lt;p&gt;双方都要发送关闭连接请求，保证双方都没有数据要发送。有些机器挥手只有3个报文，因为中间的两个报文合并在一起了。&lt;/p&gt;
&lt;h1 id=&#34;3-其他&#34;&gt;3. 其他
&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 时间戳            网络接口     数据方向     IP报文相关信息                                                  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;13:29:25.571513    wlp4s0      In         IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 57347, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 58&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;13:29:25.571554    wlp4s0      Out        IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 45420, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 52&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>TCP协议与报文结构</title>
        <link>http://localhost:1313/p/tcp%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84/</link>
        <pubDate>Fri, 16 Jun 2023 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/tcp%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-tcp%e6%8a%a5%e6%96%87%e7%bb%93%e6%9e%84&#34; &gt;1. TCP报文结构&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#11-%e5%9b%ba%e5%ae%9a%e5%a4%b4%e9%83%a8&#34; &gt;1.1. 固定头部&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#12-%e5%a4%b4%e9%83%a8%e9%80%89%e9%a1%b9&#34; &gt;1.2. 头部选项&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#121-%e6%b5%81%e6%8e%a7%e7%9b%b8%e5%85%b3&#34; &gt;1.2.1. 流控相关&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#122-%e6%8a%a5%e6%96%87%e9%87%8d%e4%bc%a0%e7%9b%b8%e5%85%b3&#34; &gt;1.2.2. 报文重传相关&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#123-%e6%97%b6%e9%97%b4%e6%88%b3%e7%9b%b8%e5%85%b3&#34; &gt;1.2.3. 时间戳相关&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%e5%8d%8f%e8%ae%ae%e7%89%b9%e6%80%a7&#34; &gt;2. 协议特性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-tcp报文结构&#34;&gt;1. TCP报文结构
&lt;/h1&gt;&lt;p&gt;TCP头部由&lt;code&gt;固定头部&lt;/code&gt;（20字节）、&lt;code&gt;头部选项&lt;/code&gt;（最长40字节）组成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/p/tcp%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84/tcp.png&#34;
	width=&#34;2205&#34;
	height=&#34;755&#34;
	srcset=&#34;http://localhost:1313/p/tcp%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84/tcp_hu_e3b2b96c58f03b84.png 480w, http://localhost:1313/p/tcp%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84/tcp_hu_58baa746c7708356.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;292&#34;
		data-flex-basis=&#34;700px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;11-固定头部&#34;&gt;1.1. 固定头部
&lt;/h2&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;字段&lt;/th&gt;
          &lt;th&gt;功能&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;32位序列号&lt;/td&gt;
          &lt;td&gt;一次TCP传输活动中，一个传输方向上，字节流中的每一个字节的编号。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;32位确认号&lt;/td&gt;
          &lt;td&gt;用于响应对方，告诉对方收到了数据，等于序列号+1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;4位头部长度&lt;/td&gt;
          &lt;td&gt;记录了TCP头部的长度有几个&lt;code&gt;32Bit&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;6个标志位&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;16位窗口大小&lt;/td&gt;
          &lt;td&gt;接收通告窗口（RWND），于流量控制，拥塞控制中会用到&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;16位校验和&lt;/td&gt;
          &lt;td&gt;发送端填充，接收端进行校验&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;16位紧急指针&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;16位标志位&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;标志位&lt;/th&gt;
          &lt;th&gt;功能&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;URG&lt;/td&gt;
          &lt;td&gt;紧急指针是否有效&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ACK&lt;/td&gt;
          &lt;td&gt;确认号是否有效&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;PSH&lt;/td&gt;
          &lt;td&gt;接收方应该尽快将这个报文交给应用层，这是一个数据报文&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;RST&lt;/td&gt;
          &lt;td&gt;连接复位请求&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;SYN&lt;/td&gt;
          &lt;td&gt;同步序号，用于建立连接，这是一个连接请求报文&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;FIN&lt;/td&gt;
          &lt;td&gt;这是一个close报文&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;12-头部选项&#34;&gt;1.2. 头部选项
&lt;/h2&gt;&lt;p&gt;头部选项长度可变，最长40个字节，主要是用于在建立连接时，协商一些参数，确定开启那些功能。头部选项结构如下（3部分）：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;一个Byte&lt;/th&gt;
          &lt;th&gt;一个Byte&lt;/th&gt;
          &lt;th&gt;n个Byte&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;kind&lt;/td&gt;
          &lt;td&gt;length&lt;/td&gt;
          &lt;td&gt;info&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;选项类型&lt;/td&gt;
          &lt;td&gt;头部选项的长度（包括kind和length）&lt;/td&gt;
          &lt;td&gt;选项的具体信息&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;121-流控相关&#34;&gt;1.2.1. 流控相关
&lt;/h3&gt;&lt;p&gt;流控相关的选项，只在建立TCP连接时才会发送，即SYN包中。 &lt;br&gt;
&lt;code&gt;kind=2, length=4, info占用2个Byte&lt;/code&gt; &lt;br&gt;
  用于指定最大报文段长度，此时，TCP连接初始化时，双方以此协商最大报文段长度（MSS），一般这个MSS=MTU-40，这个“40”包含20字节的tcp头部和20字节的ip头部。这样一来，报文就不超过MTU的长度，也就是减少了ip分片。&lt;br&gt;
&lt;code&gt;kind=3, length=3，info占用1个Byte&lt;/code&gt;&lt;br&gt;
  窗口扩大因子，info记录移位数，用于设置RWND，例如，固定头部中的16位窗口大小是S，头部选项给的窗口扩大因子是T，那么这一次TCP连接的实际RWND大小就是:  $S \times 2^T，T \in [0,14]$，也就是S左移T位。但是有一个问题，人家RWND最大才16bBit(65536)，这样一搞，不就超了吗？实际上内核是允许的，并可以通过修改 &lt;strong&gt;/proc/sys/net/ipv4/tcp_window_scaling&lt;/strong&gt; 的值来启用或者关闭窗口扩大因子选项。&lt;/p&gt;
&lt;h3 id=&#34;122-报文重传相关&#34;&gt;1.2.2. 报文重传相关
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;kind=4, length=2, 无info&lt;/code&gt;&lt;br&gt;
  该选项在建立连接时使用，用于启用SACK选项（Selective Acknowledgment，选择性确认）。TCP协议有丢包重传的功能，假如现在发送方发送了A、B、C、D、E、F，6个报文，结果从B开始丢包了，此时TCP模块会重传A之后的所有报文，开启SACK功能后，TCP模块只重传那些丢失的报文，至于如何确认那些报文丢失了，就是kind=5选项的工作了。&lt;br&gt;
&lt;code&gt;kind=5, ..., ...&lt;/code&gt;&lt;br&gt;
  这个是SACK实际工作选项，也就是丢包时会用到，这个选项会发送丢包信息（info），发送方通过这些信息确认丢失的报文。&lt;/p&gt;
&lt;p&gt;  参考 &lt;strong&gt;【报文重传】&lt;/strong&gt; 篇章理解该选项。&lt;/p&gt;
&lt;h3 id=&#34;123-时间戳相关&#34;&gt;1.2.3. 时间戳相关
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;kind=8, length=10, info占用8个Byte&lt;/code&gt;&lt;br&gt;
  这个是时间戳选项，计算RTT时间，主要服务于流控。&lt;/p&gt;
&lt;h1 id=&#34;2-协议特性&#34;&gt;2. 协议特性
&lt;/h1&gt;&lt;p&gt;  传输层协议有两个，TCP和UDP，我们都知道UDP是数据报协议，用于广播/多播场景， 而TCP协议是&lt;code&gt;面向连接&lt;/code&gt;、&lt;code&gt;字节流&lt;/code&gt;、&lt;code&gt;可靠传输&lt;/code&gt;的传输层协议，同时，每每提到TCP协议，都会提及&lt;code&gt;用塞控制&lt;/code&gt;，对于这些关键特性后面会有单独的章节进行介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;面向连接&lt;/strong&gt;： 每一次的通讯都需要建立&lt;code&gt;一对一&lt;/code&gt;的连接，然后才能进行数据传输，数据传输完成后结束连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字节流&lt;/strong&gt;：  在发送端，应用层通过N次写操作，将数据放到TCP发送缓存区后，TCP模块会将发送缓存区中的数据封装成M个TCP报文发送出去，但是这个N和M没有联系，再说接收端接收到数据后，TCP模块会按照报文的序号将数据依次放入TCP的接收缓存区中，并通知应用程序读取数据，应用程序是一次性读取完成还是分为K次读取，完全是应用程序的设计需求，和N、M没有关系。也就是说，发送端写的次数和接收端读取的次数没有瓜葛，可以理解为TCP协议在传输数据时是没有边界的，这就是“字节流”的概念。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可靠传输&lt;/strong&gt;： 为了保证可靠性，TCP做了3件事，采用&lt;code&gt;发送应答机制&lt;/code&gt;、&lt;code&gt;报文重传&lt;/code&gt;、&lt;code&gt;报文重排&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用塞控制&lt;/strong&gt;： 通过一定的算法设计控制发送报文的速度，以此提高网络带宽利用率，这也是TCP模块的重要职责之一。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
