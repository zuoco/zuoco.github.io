<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Linkers &amp; Loaders on 阿左笔记</title>
        <link>https://zuoco.github.io/categories/linkers--loaders/</link>
        <description>Recent content in Linkers &amp; Loaders on 阿左笔记</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>阿左阿右</copyright>
        <lastBuildDate>Wed, 12 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://zuoco.github.io/categories/linkers--loaders/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>进程的装载</title>
        <link>https://zuoco.github.io/p/%E8%BF%9B%E7%A8%8B%E7%9A%84%E8%A3%85%E8%BD%BD/</link>
        <pubDate>Wed, 12 Jul 2023 00:00:00 +0000</pubDate>
        
        <guid>https://zuoco.github.io/p/%E8%BF%9B%E7%A8%8B%E7%9A%84%E8%A3%85%E8%BD%BD/</guid>
        <description>&lt;h1 id=&#34;2-将程序装载到内存中&#34;&gt;2. 将程序装载到内存中
&lt;/h1&gt;&lt;p&gt;   程序执行时所需要的指令和数据必须在内存中才能够正常运行，最简单的办法就是将程序运行所需要的指令和数据全都装入内存中，这样程序就可以顺利运行。程序装载有两种方式：&lt;code&gt;静态装载&lt;/code&gt;、&lt;code&gt;动态装载&lt;/code&gt;，静态装载占用内存较大，甚至大于物理内存的数量，所以现代操作系统都采用动态装载。程序运行时是有&lt;code&gt;局部性&lt;/code&gt;原理的，所以我们可以将程序最常用的部分驻留在内存中，而将一些不太常用的数据存放在磁盘里面，这就是动态装入的基本原理。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>进程的虚拟地址空间</title>
        <link>https://zuoco.github.io/p/%E8%BF%9B%E7%A8%8B%E7%9A%84%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4/</link>
        <pubDate>Tue, 11 Jul 2023 00:00:00 +0000</pubDate>
        
        <guid>https://zuoco.github.io/p/%E8%BF%9B%E7%A8%8B%E7%9A%84%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4/</guid>
        <description>&lt;p&gt;  可执行文件只有装载到内存以后才能被CPU执行。早期的程序装载十分简陋，装载的基本过程就是把程序从外部存储器中读取到内存中的某个位置。随着硬件MMU的诞生，多进程、多用户、虚拟存储的操作系统出现以后，可执行文件的装载过程变得非常复杂。&lt;/p&gt;
&lt;h1 id=&#34;1-进程的虚拟地址空间&#34;&gt;1. 进程的虚拟地址空间
&lt;/h1&gt;&lt;p&gt;  每个程序被运行起来以后，它将拥有自己独立的虚拟地址空间（Virtual Address Space），这个虚拟地址空间的大小由计算机的硬件平台决定，具体地说是由CPU的位数决定的。硬件决定了地址空间的最大理论上限，即硬件的寻址空间大小，比如32位的硬件平台决定了虚拟地址空间的地址为0 ~ $2^{32-1}$，即0x00000000~0xFFFFFFFF，也就是我们常说的4GB 虚拟空间大小；而64位的硬件平台具有64位寻址能力，它的虚拟地址空间高达0 ~ $2^{64}$。&lt;/p&gt;
&lt;p&gt;   我们以32位Linux操作系统为例，32位平台下有4GB的虚拟空间，而进程只能使用那些操作系统分配给进程的地址，如果访问未经允许的空间，那么操作系统就会捕获到这些访问，将进程的这种访问当作非法操作，强制结束进程。Windows系统上的&lt;code&gt;进程因非法操作需要关闭&lt;/code&gt;以及Linux下的&lt;code&gt;Segmentation fault&lt;/code&gt;很多时候就是因为进程访问了未经允许的地址。那么到底这4GB的进程虚拟地址空间是怎样的分配状态呢？默认情况下，Linux操作系统将进程的虚拟地址空间做了如下图所示的分配: &lt;br&gt;
&lt;img src=&#34;https://zuoco.github.io/p/%E8%BF%9B%E7%A8%8B%E7%9A%84%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4/address-space.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;br&gt;
4GB内存可能不够用，所以Intel 在1995年在CPU中引入了PAE（物理地址扩展）机制，将32位地址扩展到36位，即4GB到64GB。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;对于Windows&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
在 32 位 &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/windows-hardware/drivers/gettingstarted/virtual-address-spaces?source=recommendations&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Windows系统&lt;/a&gt; 中，可用的虚拟地址空间共计为 2^32 字节（4 GB）。 通常，较低的 2 GB 用于用户空间，而上 2 GB 用于系统空间。不过Windows是可以修改启动参数将操作系统占用的虚拟地址空间减少到1GB，即跟Linux一样。在 64 位 Windows 中，虚拟地址空间的理论大小为 2^64 字节，但实际上仅使用一小部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;对于64位系统&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
对于64位系统，理论虚拟地址空间是0 ~ $2^{64}$，也就是高达16EB的空间，实际也用不了这么多，所以一般操作系统分配了256TB的地址空间，低128TB分配给用户进程，高128TB给内核空间。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>目标文件是什么样子的</title>
        <link>https://zuoco.github.io/p/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90%E7%9A%84/</link>
        <pubDate>Tue, 09 May 2023 00:00:00 +0000</pubDate>
        
        <guid>https://zuoco.github.io/p/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90%E7%9A%84/</guid>
        <description>&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-%e7%9b%ae%e6%a0%87%e6%96%87%e4%bb%b6%e6%a0%bc%e5%bc%8f&#34; &gt;1. 目标文件格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-%e7%9b%ae%e6%a0%87%e6%96%87%e4%bb%b6%e7%bb%93%e6%9e%84&#34; &gt;2. 目标文件结构&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;1-目标文件格式&#34;&gt;1. 目标文件格式
&lt;/h1&gt;&lt;p&gt;  PC平台的主流可执行文件格式有两种：Linux上的&lt;code&gt;ELF&lt;/code&gt;和Windows上的&lt;code&gt;PE&lt;/code&gt;。不仅仅是可执行文件，动态链接库、静态链接库、目标文件也都是以相同的格式保存的。以ELF为例，可以进一步分为4类：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;ELF文件类型&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
          &lt;th&gt;例子&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;可重定位文件&lt;/td&gt;
          &lt;td&gt;可以被用来链接成可执行文件、共享目标文件，例如静态库。&lt;/td&gt;
          &lt;td&gt;linux系统的.o &lt;br&gt; windows系统的.obj&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;可执行文件&lt;/td&gt;
          &lt;td&gt;最常见的，没什么好说的&lt;/td&gt;
          &lt;td&gt;Windows系统的.exe &lt;br&gt; Linux系统上没有后缀&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;共享目标文件&lt;/td&gt;
          &lt;td&gt;1. 连接器使用该文件和其他可重定位文件、共享目标文件链接，昌盛新的目标文件。    &lt;br&gt;     2. 动态链接器将几个共享目标文件与可执行文件结合，作为进程映像的一部分来运行。&lt;/td&gt;
          &lt;td&gt;Linux系统的 .so &lt;br&gt; windows系统的 .dll&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;核心转储文件&lt;/td&gt;
          &lt;td&gt;进程意外终止时，系统将该进程地址空间的内容和终止时的一些信息存储到核心存储文件。&lt;/td&gt;
          &lt;td&gt;Linux系统的 core dump&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;  实际上这两货都是COFF格式的变种，在Linux系统上可以使用file命令查看文件类型。COFF引入了&lt;code&gt;段&lt;/code&gt;的概念，不同的目标文件，段的数量，类型不同。&lt;/p&gt;
&lt;h1 id=&#34;2-目标文件结构&#34;&gt;2. 目标文件结构
&lt;/h1&gt;&lt;p&gt;  一个目标文件包含了多种信息，例如指令、数据等等，不同类型的数据放在不同的&lt;code&gt;段&lt;/code&gt;中，具有不同的权限。以ELF文件为例： &lt;br&gt;
&lt;img src=&#34;https://zuoco.github.io/p/%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90%E7%9A%84/object-file-structure.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;br&gt;
  ELF文件的开头是一个&lt;code&gt;文件头&lt;/code&gt;，它描述了整个文件的文件属性，包括文件是否可执行、是静态链接还是动态链接，以及入口地址（可执行文件）、目标硬件、目标操作系统等等信息。文件头中还包含一个&lt;code&gt;段表&lt;/code&gt;（Section Table），其实就是个数组，这个表描述了文件中的各个段的属性以及段在文件中的偏移位置等等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二进制文件中的&lt;code&gt;机器指令&lt;/code&gt;位于&lt;code&gt;代码段&lt;/code&gt;（.text或.code）中；&lt;/li&gt;
&lt;li&gt;已初始化全局变量以及局部静态的变量位于&lt;code&gt;数据段&lt;/code&gt;（.data）；&lt;/li&gt;
&lt;li&gt;未初始化全局变量以及静态局部变量位于&lt;code&gt;BSS段&lt;/code&gt;（.bss），这个段只是一个预留位置，内有内容，不占空间；&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
