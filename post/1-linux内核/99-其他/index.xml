<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>《 其他 》 on 阿左笔记</title>
        <link>https://zuoco.github.io/post/1-linux%E5%86%85%E6%A0%B8/99-%E5%85%B6%E4%BB%96/</link>
        <description>Recent content in 《 其他 》 on 阿左笔记</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>阿左阿右</copyright>
        <lastBuildDate>Thu, 19 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://zuoco.github.io/post/1-linux%E5%86%85%E6%A0%B8/99-%E5%85%B6%E4%BB%96/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>RCU，一种高效的并发同步机制</title>
        <link>https://zuoco.github.io/p/rcu%E4%B8%80%E7%A7%8D%E9%AB%98%E6%95%88%E7%9A%84%E5%B9%B6%E5%8F%91%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/</link>
        <pubDate>Thu, 19 Sep 2024 00:00:00 +0000</pubDate>
        
        <guid>https://zuoco.github.io/p/rcu%E4%B8%80%E7%A7%8D%E9%AB%98%E6%95%88%E7%9A%84%E5%B9%B6%E5%8F%91%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#1-rcu-%e7%9a%84%e6%a0%b8%e5%bf%83%e6%a6%82%e5%bf%b5&#34; &gt;1. &lt;strong&gt;RCU 的核心概念&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#2-rcu-%e7%9a%84%e5%b7%a5%e4%bd%9c%e6%9c%ba%e5%88%b6&#34; &gt;2. &lt;strong&gt;RCU 的工作机制&lt;/strong&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#21-%e8%af%bb%e8%80%85%e8%ae%bf%e9%97%ae%e6%b5%81%e7%a8%8b&#34; &gt;2.1. &lt;strong&gt;读者访问流程&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#22-%e5%86%99%e8%80%85%e6%9b%b4%e6%96%b0%e6%b5%81%e7%a8%8b&#34; &gt;2.2. &lt;strong&gt;写者更新流程&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#23-%e5%ae%bd%e9%99%90%e6%9c%9f%e7%ae%a1%e7%90%86&#34; &gt;2.3. &lt;strong&gt;宽限期管理&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#3-rcu-%e7%9a%84%e4%bc%98%e7%bc%ba%e7%82%b9&#34; &gt;3. &lt;strong&gt;RCU 的优缺点&lt;/strong&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#31-%e4%bc%98%e7%82%b9&#34; &gt;3.1. &lt;strong&gt;优点&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#32-%e7%bc%ba%e7%82%b9&#34; &gt;3.2. &lt;strong&gt;缺点&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#4-rcu-%e7%9a%84%e5%85%b8%e5%9e%8b%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af&#34; &gt;4. &lt;strong&gt;RCU 的典型应用场景&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#5-rcu-%e4%b8%8e%e4%bc%a0%e7%bb%9f%e5%90%8c%e6%ad%a5%e6%9c%ba%e5%88%b6%e7%9a%84%e5%af%b9%e6%af%94&#34; &gt;5. &lt;strong&gt;RCU 与传统同步机制的对比&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#6-rcu-%e7%9a%84%e5%8f%98%e7%a7%8d%e4%b8%8e%e6%89%a9%e5%b1%95&#34; &gt;6. &lt;strong&gt;RCU 的变种与扩展&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#7-rcu-%e7%9a%84%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9&#34; &gt;7. &lt;strong&gt;RCU 的注意事项&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#8-%e6%80%bb%e7%bb%93&#34; &gt;8. &lt;strong&gt;总结&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Linux 内核中，&lt;strong&gt;RCU（Read-Copy-Update）&lt;/strong&gt; 是一种高效的并发同步机制，旨在优化&lt;strong&gt;读多写少&lt;/strong&gt;的场景。它的核心目标是&lt;strong&gt;减少读者的同步开销&lt;/strong&gt;，同时确保写者的操作不会阻塞读者。以下是关于 &lt;strong&gt;RCU 环境&lt;/strong&gt; 的详细解析：&lt;/p&gt;
&lt;h1 id=&#34;1-rcu-的核心概念&#34;&gt;1. &lt;strong&gt;RCU 的核心概念&lt;/strong&gt;
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;读者（Reader）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以并发访问被 RCU 保护的数据，&lt;strong&gt;无需加锁&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;读者在访问期间不能发生上下文切换（即不能进入睡眠状态），否则可能破坏 RCU 的一致性。&lt;/li&gt;
&lt;li&gt;读者的访问是原子的，且能看到完整的数据结构（旧版本或新版本）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;写者（Writer）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改数据时需遵循以下步骤：
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;拷贝副本&lt;/strong&gt;：复制当前数据的副本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;修改副本&lt;/strong&gt;：对副本进行修改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原子替换&lt;/strong&gt;：将指针指向新副本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延迟释放&lt;/strong&gt;：通过 &lt;strong&gt;宽限期（Grace Period）&lt;/strong&gt; 确保所有读者完成访问后，再释放旧数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;写者之间需要互斥（如通过自旋锁）以避免冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;宽限期（Grace Period）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有 CPU 都经历一次&lt;strong&gt;静止状态（Quiescent State）&lt;/strong&gt;（如上下文切换、空闲循环）所需的时间。&lt;/li&gt;
&lt;li&gt;一旦宽限期结束，写者可以安全地释放旧数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;静止状态（Quiescent State）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表示某个 CPU 已经完成了所有 RCU 读端临界区的访问。&lt;/li&gt;
&lt;li&gt;常见的静止状态包括：进程上下文切换、进入空闲循环等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;2-rcu-的工作机制&#34;&gt;2. &lt;strong&gt;RCU 的工作机制&lt;/strong&gt;
&lt;/h1&gt;&lt;h2 id=&#34;21-读者访问流程&#34;&gt;2.1. &lt;strong&gt;读者访问流程&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;读者通过 &lt;code&gt;rcu_read_lock()&lt;/code&gt; 和 &lt;code&gt;rcu_read_unlock()&lt;/code&gt; 声明 RCU 读端临界区。&lt;/li&gt;
&lt;li&gt;在读端临界区内，读者可以安全地访问被 RCU 保护的数据。&lt;/li&gt;
&lt;li&gt;读者访问的是&lt;strong&gt;稳定版本的数据&lt;/strong&gt;（旧版本或新版本），不会看到中间状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;22-写者更新流程&#34;&gt;2.2. &lt;strong&gt;写者更新流程&lt;/strong&gt;
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;拷贝数据&lt;/strong&gt;：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;kmalloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(...);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 拷贝副本
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;修改副本&lt;/strong&gt;：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 修改副本
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原子替换&lt;/strong&gt;：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;rcu_assign_pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gbl_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 原子更新指针
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延迟释放&lt;/strong&gt;：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;call_rcu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rcu_head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;free_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 注册回调函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;call_rcu&lt;/code&gt; 会在宽限期结束后调用 &lt;code&gt;free_data&lt;/code&gt; 释放旧数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;23-宽限期管理&#34;&gt;2.3. &lt;strong&gt;宽限期管理&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;检测静止状态&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;内核通过跟踪每个 CPU 的静止状态（如进程调度、中断处理）来判断是否满足宽限期。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;触发回收&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;一旦所有 CPU 都进入静止状态，RCU 的垃圾回收器会调用写者注册的回调函数（如 &lt;code&gt;free_data&lt;/code&gt;）释放旧数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;3-rcu-的优缺点&#34;&gt;3. &lt;strong&gt;RCU 的优缺点&lt;/strong&gt;
&lt;/h1&gt;&lt;h2 id=&#34;31-优点&#34;&gt;3.1. &lt;strong&gt;优点&lt;/strong&gt;
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;读者零开销&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;读者无需加锁，访问效率极高，特别适合读多写少的场景（如文件系统目录遍历）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免死锁&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;RCU 不涉及锁竞争，不存在死锁风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优先级无倒置&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;读者不会阻塞写者，也不会因优先级问题导致低优先级任务阻塞高优先级任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用场景广泛&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;常用于网络协议栈、文件系统、内存管理等高性能场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;32-缺点&#34;&gt;3.2. &lt;strong&gt;缺点&lt;/strong&gt;
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;写者开销较高&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;写者需要拷贝数据副本，增加了内存和时间开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延迟释放&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;旧数据的释放需要等待宽限期，可能导致内存占用短暂增加。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复杂性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;实现和调试 RCU 代码需要对同步机制有较深的理解。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;4-rcu-的典型应用场景&#34;&gt;4. &lt;strong&gt;RCU 的典型应用场景&lt;/strong&gt;
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;网络协议栈&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在 Linux 内核中，RCU 用于管理路由表、ARP 缓存等频繁读取但较少修改的数据结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件系统&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;用于目录项（dentry）和 inode 缓存的管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存管理&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在页表更新中，RCU 用于避免 TLB 刷新的开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存系统&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在高速缓存（如 Slab 分配器）中，RCU 用于管理对象池。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;5-rcu-与传统同步机制的对比&#34;&gt;5. &lt;strong&gt;RCU 与传统同步机制的对比&lt;/strong&gt;
&lt;/h1&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;特性&lt;/th&gt;
          &lt;th&gt;RCU&lt;/th&gt;
          &lt;th&gt;读写锁（Read-Write Lock）&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;读者开销&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;零开销（无需加锁）&lt;/td&gt;
          &lt;td&gt;读者需要加锁，开销较高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;写者开销&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;较高（需拷贝副本）&lt;/td&gt;
          &lt;td&gt;写者独占，开销较低&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;读者阻塞&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;不阻塞&lt;/td&gt;
          &lt;td&gt;写者会阻塞读者&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;读多写少&lt;/td&gt;
          &lt;td&gt;读写均衡&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;内存占用&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;短暂增加（延迟释放）&lt;/td&gt;
          &lt;td&gt;无额外内存占用&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;复杂性&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;较高（需管理宽限期）&lt;/td&gt;
          &lt;td&gt;较低（直接加锁即可）&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;6-rcu-的变种与扩展&#34;&gt;6. &lt;strong&gt;RCU 的变种与扩展&lt;/strong&gt;
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;抢占式 RCU（Preemptible RCU）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;允许读者在 RCU 临界区内进行上下文切换，但需保证内核抢占不会破坏 RCU 的一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可睡眠 RCU（SRCU）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;允许读者在 RCU 临界区内睡眠，适用于用户空间线程或复杂场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分层 RCU（Hierarchical RCU）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;将 RCU 分为多个层级，优化大规模多核系统的性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;7-rcu-的注意事项&#34;&gt;7. &lt;strong&gt;RCU 的注意事项&lt;/strong&gt;
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;读者不能睡眠&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;在 RCU 读端临界区内，读者不能调用可能睡眠的函数（如 &lt;code&gt;kmalloc(GFP_KERNEL)&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;写者的互斥&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;多个写者之间需要通过锁（如自旋锁）互斥访问，避免并发修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存屏障&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;rcu_read_lock()&lt;/code&gt; 和 &lt;code&gt;rcu_read_unlock()&lt;/code&gt; 时需配合内存屏障（Memory Barrier）确保可见性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;宽限期的管理&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;写者需确保宽限期结束后再释放资源，避免读者访问已释放的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;8-总结&#34;&gt;8. &lt;strong&gt;总结&lt;/strong&gt;
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;RCU 环境&lt;/strong&gt; 是 Linux 内核中一种高效的并发同步机制，通过&lt;strong&gt;无锁读取&lt;/strong&gt;和&lt;strong&gt;延迟释放&lt;/strong&gt;的策略，显著提升了读多写少场景下的性能。其核心思想是：&lt;strong&gt;读者无需等待写者完成，而写者通过拷贝和原子替换避免阻塞读者&lt;/strong&gt;。尽管 RCU 的实现较为复杂，但在网络协议栈、文件系统等高性能场景中，它是不可或缺的工具。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
